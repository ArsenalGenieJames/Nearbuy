-- Users table
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  usertype VARCHAR(50),
  email VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  firstname VARCHAR(100),
  lastname VARCHAR(100),
  phone_number VARCHAR(20),
  address TEXT,
  profile_picture VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Products table
CREATE TABLE products (
  id SERIAL PRIMARY KEY,
  product_name VARCHAR(255),
  product_type VARCHAR(100),
  price DECIMAL(10,2),
  description TEXT,
  quantity INT,
  weight DECIMAL(10,2),
  size VARCHAR(50),
  image_url VARCHAR(255)
);

-- Stores table
CREATE TABLE stores (
  id SERIAL PRIMARY KEY,
  store_name VARCHAR(255),
  location VARCHAR(255),
  ratings DECIMAL(3,2),
  profile_store VARCHAR(255)
);

--ordered
CREATE TABLE ordered (
  id SERIAL PRIMARY KEY,
  order_id INT REFERENCES orders(id),
  product_id INT REFERENCES products(id),
  quantity INT,
  price DECIMAL(10,2),
  total DECIMAL(10,2)
);

-- Orders table
CREATE TABLE orders (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  product_id INT REFERENCES products(id),
  price DECIMAL(10,2),
  quantity INT,
  payment_method VARCHAR(50),
  total_price DECIMAL(10,2),
  status VARCHAR(50),
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Messages table
CREATE TABLE messages (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  statement TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Store inventory table
CREATE TABLE store_inventory (
  id SERIAL PRIMARY KEY,
  store_id INT REFERENCES stores(id),
  product_id INT REFERENCES products(id),
  quantity INT
);

-- Locations table
CREATE TABLE locations (
  id SERIAL PRIMARY KEY,
  latitude DECIMAL(10, 7) NOT NULL,
  longitude DECIMAL(10, 7) NOT NULL,
  address TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Deliveries table
CREATE TABLE deliveries (
  id SERIAL PRIMARY KEY,
  order_id INT REFERENCES orders(id),
  seller_id INT REFERENCES users(id),
  rider_id INT REFERENCES users(id),
  pickup_location_id INT REFERENCES locations(id),
  dropoff_location_id INT REFERENCES locations(id),
  status VARCHAR(50),
  assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE vouchers (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),         -- voucher assigned to a user (nullable if general voucher)
  discount_percent DECIMAL(5, 2) NOT NULL,  -- e.g. 15.00 for 15% discount
  expiry_date DATE NOT NULL,                 -- voucher expiration
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status VARCHAR(50) NOT NULL,               -- e.g. 'active', 'redeemed', 'expired'
  voucher_code VARCHAR(100) UNIQUE NOT NULL -- unique code customers enter/use
);



CREATE TABLE feedback (  
  id SERIAL PRIMARY KEY,  
  user_id INT REFERENCES users(id),  
  entity_type VARCHAR(20) NOT NULL CHECK (entity_type IN ('store', 'product')),  
  entity_id INT NOT NULL, -- references either a store or product depending on entity_type  
  profile_picture VARCHAR(255),  
  firstname VARCHAR(100),  
  lastname VARCHAR(100),  
  statement TEXT,  
  rate INT CHECK (rate BETWEEN 1 AND 5),  
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
);  
